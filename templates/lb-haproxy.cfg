cat <<EOF
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    pidfile     /root/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    ${LB_TIMEOUT}
    timeout queue           ${LB_TIMEOUT}
    timeout connect         ${LB_TIMEOUT}
    timeout client          ${LB_TIMEOUT}
    timeout server          ${LB_TIMEOUT}
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 ${LB_MAXCONN}

frontend  main *:80
    default_backend             app

    # At most 1024 concurrent connections from a client
    acl too_fast fe_sess_rate ge ${LB_RATELIMIT_AFTER}

    # Effectively working as a delay mechanism for clients that are too fast
    tcp-request inspect-delay 1000ms

    # Fast-path - accept connection if it's not this troublesome client
    tcp-request content accept unless too_fast

    # The very fast client gets here meaning they have to wait full inspect-delay
    tcp-request content accept if WAIT_END

listen stats :8888
   mode http
   stats enable
   stats scope app
   stats scope static
   stats scope static_httpclose
   stats realm Haproxy\ Statistics
   stats uri /_stats
   stats auth haproxy:${LB_STATS_PASSWORD}



backend app
    balance roundrobin
    option httpchk GET ${LB_HTTP_CHECK_URL}

EOF



