#!/bin/bash
set -eu
#Defaults
export LB_HTTP_CHECK_URL="/"
export LB_RATELIMIT_AFTER=1024
export LB_MAXCONN=1024
export LB_MAXCONN_PER=256
export LB_CHECK_INTERVAL=5000
export LB_TIMEOUT=10s
export LB_STATS_PASSWORD=password
export LB_TARGET_COMPONENT=
export COMPONENT_MODIFIER=
export ENVIRONMENT_MODIFIER=
export MIN_INSTANCES=0
export MAX_INSTANCES=10000000
export BACKUP_HOST=localhost
export DATACENTER=

#if ! which overcast
#then
#    echo "Installing overcast as you don't seem to have it installed."
#    npm -g install overcast
#fi

if ! which wget  &> /dev/null
then
    echo "Please download and install 'wget' before continuing."
    echo "If you're on a Mac then try: "
    echo " $ brew  install wget"
fi

#if ! which serf  &> /dev/null
#then
#    echo "Please download and install 'serf' before continuing."
#    echo "See http://www.serfdom.io/intro/getting-started/install.html "
#    echo "If you're on a Mac then try: "
##    echo 'ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" \#If you don\'t have Homebrew'
##    echo " $ brew install phinze/cask/brew-cask \# If you don't have cask"
#    echo " $ brew cask install serf"
#fi



if ! which parallel  &> /dev/null
then
    echo "Please download and install 'GNU Parallel' before continuing."
    echo "If you're on a Mac then try: "
    echo "$ brew install parallel"
fi

if ! which tugboat &> /dev/null
then
    echo "Please download and install 'tugboat' before continuing, if you have Ruby installed then 'sudo gem install tugboat' should do the job."
    exit -1
fi

if [ ! -f ~/.ezd/serf_key ]
then
    [ -d ~/.ezd ] ||  mkdir ~/.ezd
    serf keygen > ~/.ezd/serf_key
fi


[ -f ~/.ssh/easydeploy_id_rsa ] || (ssh-keygen -q -t rsa -N "" -f ~/.ssh/easydeploy_id_rsa && echo "FIRST RUN!! Make sure the following key has access to your git repository, you'll have problems if not. Run this script again now that we've generated your key." && cat  ~/.ssh/easydeploy_id_rsa.pub && exit 0)


export DIR=$(pwd)
cd $(dirname $0) &> /dev/null
. ../commands/common.sh
usage()
{
cat << EOF
usage: $0 options

Main easy deploy command

OPTIONS:
   -h      Show this message
   -e      Environment to deploy to (overrides DEPLOY_ENV in a profile file)
   -p      Deployment profile file


Sub commands

deploy <ip-address>
create
scale
remote-tail
rebuild
rebuild-app
update
upgrade

EOF
}


profile="$DIR/ezd/deploy/conf.sh"
e=
envModifier=
project=
export USE_PARALLEL=
while getopts "he:p:m:b:Pc:" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         e)
             e=$OPTARG
             ;;
         m)
             envModifier=$OPTARG
             ;;
         P)
             export USE_PARALLEL=1
             ;;
         c)
             profile="$OPTARG"
             ;;
         p)
             project="$OPTARG"
             ;;
         ?)
             usage
             exit
             ;;
     esac
done



if [ ! -z "$e" ]
then
    export DEPLOY_ENV="$e"
fi


if [ ! -f $profile ]
then
    echo "Please specify the deployment profile to use, this is normally a file called conf.sh, default is ezd/deploy/conf.sh"
    exit 1
fi

env_profile="$DIR/ezd/deploy/${DEPLOY_ENV}/conf.sh"
source "${profile}"
[ -f ${env_profile} ] &&  source "${env_profile}" || :

if [ ! -z "$envModifier" ]
then
    export ENVIRONMENT_MODIFIER="$envModifier"
fi


if [ ! -z "$project" ]
then
    export PROJECT="$project"
fi


shift $((OPTIND-1))
command=$1
shift

case $command in
     help)
         usage
         exit 1
         ;;
     bootstrap)
         ../commands/bootstrap.sh $@
         ;;
     clean)
         ../commands/clean.sh $@
         ;;
     image)
         ../commands/image.sh $@
         ;;
     deploy)
         ../commands/deploy.sh $@
         ;;
     destroy)
         ../commands/destroy.sh $@
         ;;
     create)
         ../commands/deploy-and-provision.sh $@
         ;;
     cycle)
         ../commands/cycle.sh $@
         ;;
     rebuild)
         ../commands/rebuild-machines.sh $@
         ;;
     rebuild-app)
         ../commands/rebuild-app.sh $@
         ;;
     release)
         ../commands/release.sh $@
         ;;
     upgrade)
         ../commands/upgrade-machines.sh $@
         ;;
     update)
         ../commands/update.sh $@
         ;;
     update-lb)
         ../commands/update-lb.sh $@
         ;;
     tail)
         ../commands/remote-tail.sh $@
         ;;
     scale)
         ../commands/scale.sh $@
         ;;
     list)
         ../commands/list.sh $@
         ;;
     watch)
         ../commands/watch.sh $@
         ;;
     remote)
         ../commands/remote.sh $@
         ;;
     wire)
         ../commands/wire.sh $@
         ;;
     *)
        usage;
        exit 1
         ;;
 esac


