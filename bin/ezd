#!/bin/bash
set -e
#Defaults
export LB_HTTP_CHECK_URL="/"
export LB_RATELIMIT_AFTER=1024
export LB_MAXCONN=1024
export LB_MAXCONN_PER=256
export LB_CHECK_INTERVAL=5000
export LB_TIMEOUT=10s
export LB_STATS_PASSWORD=password
export LB_TARGET_COMPONENT=
export COMPONENT_MODIFIER=
export MIN_INSTANCES=0
export MAX_INSTANCES=10000000
export BACKUP_HOST=localhost

if ! which wget  &> /dev/null
then
    echo "Please download and install 'wget' before continuing."
    echo "If you're on a Mac then try: "
    echo " $ brew  install wget"
fi

if ! which serf  &> /dev/null
then
    echo "Please download and install 'serf' before continuing."
    echo "See http://www.serfdom.io/intro/getting-started/install.html "
    echo "If you're on a Mac then try: "
#    echo 'ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" \#If you don\'t have Homebrew'
#    echo " $ brew install phinze/cask/brew-cask \# If you don't have cask"
    echo " $ brew cask install serf"
fi


if [ ! -f ~/.ezd/client_install/.consulx ]
then
    echo "Installing consul for service discovery and communication"
    [ -d ~/.ezd/client_install/ ] || mkdir -p ~/.ezd/client_install/
    cd ~/.ezd/client_install/
    [ -f 0.2.0_darwin_amd64.zip ] || wget https://dl.bintray.com/mitchellh/consul/0.2.0_darwin_amd64.zip
    unzip 0.2.0_darwin_amd64.zip
    sudo mv -f consul /usr/local/bin
    sudo chmod 755 /usr/local/bin/consul
    cd -
    [ -d  ~/.ezd/client_install/consul_ui ] || mkdir ~/.ezd/client_install/consul_ui
    cd ~/.ezd/client_install/consul_ui
    rm -rf ~/.ezd/client_install/consul_ui/* || :
    [ -f 0.2.0_web_ui.zip ] ||  wget https://dl.bintray.com/mitchellh/consul/0.2.0_web_ui.zip
    unzip 0.2.0_web_ui.zip
    cd -

cat > ~/.ezd/client_install/consul.json <<EOF

{
  "datacenter": "dc1",
  "data_dir": "/tmp",
  "log_level": "INFO",
  "server": false,
  "domain" : "easydeploy.",
  "encrypt" :"$(cat ~/.ezd/serf_key)",
  "leave_on_terminate" : true
}
EOF

    touch  ~/.ezd/client_install/.consulx
fi

if ! which parallel  &> /dev/null
then
    echo "Please download and install 'GNU Parallel' before continuing."
    echo "If you're on a Mac then try: "
    echo "$ brew install parallel"
fi

if ! which tugboat &> /dev/null
then
    echo "Please download and install 'tugboat' before continuing, if you have Ruby installed then 'sudo gem install tugboat' should do the job."
fi

if [ ! -f ~/.ezd/serf_key ]
then
    [ -d ~/.ezd ] ||  mkdir ~/.ezd
    serf keygen > ~/.ezd/serf_key
fi


[ -f ~/.ssh/easydeploy_id_rsa ] || (ssh-keygen -q -t rsa -N "" -f ~/.ssh/easydeploy_id_rsa && echo "FIRST RUN!! Make sure the following key has access to your git repository, you'll have problems if not. Run this script again now that we've generated your key." && cat  ~/.ssh/easydeploy_id_rsa.pub && exit 0)


DIR=$(pwd)
cd $(dirname $0) &> /dev/null
. ../commands/common.sh
usage()
{
cat << EOF
usage: $0 options

Main easy deploy command

OPTIONS:
   -h      Show this message
   -b      Git branch to use (overrides GIT_BRANCH in a profile file)
   -e      Environment to deploy to (overrides DEPLOY_ENV in a profile file)
   -p      Deployment profile file


Sub commands

deploy <ip-address>
create
scale
remote-tail
rebuild
upgrade

EOF
}



e=
branch=
export USE_PARALLEL=
while getopts "he:p:b:P" OPTION
do
     case $OPTION in
         h)
             usage
             exit 1
             ;;
         e)
             e=$OPTARG
             ;;
         b)
             branch=$OPTARG
             ;;
         P)
             export USE_PARALLEL=1
             ;;
         p)
             profile="$OPTARG"
             cd $DIR > /dev/null
             source ${profile}
             cd - > /dev/null
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [ ! -z "$e" ]
then
    export DEPLOY_ENV="$e"
fi


if [ -z "$profile" ]
then
    echo "Please specify the deployment profile to use, this is normally a file ending in .profile"
     exit 1
fi

if [ -z "$GIT_BRANCH" ]
then
    if [ ! -z "$branch" ]
    then
        export GIT_BRANCH=${branch}
    elif [ ${DEPLOY_ENV} == "prod" ] ||  [ ${DEPLOY_ENV} == "alt-prod" ]
    then
         export GIT_BRANCH=master
    else
         echo "Using ${DEPLOY_ENV} branch"
         export GIT_BRANCH=${DEPLOY_ENV}
    fi
fi

shift $((OPTIND-1))
command=$1
shift

case $command in
     help)
         usage
         exit 1
         ;;
     bootstrap)
         ../commands/bootstrap.sh $@
         ;;
     clean)
         ../commands/clean.sh $@
         ;;
     consul-gui)
         ../commands/consul-gui.sh $@
         ;;
     image)
         ../commands/image.sh $@
         ;;
     deploy)
         ../commands/deploy.sh $@
         ;;
     destroy)
         ../commands/destroy.sh $@
         ;;
     create)
         ../commands/deploy-and-provision.sh $@
         ;;
     rebuild)
         ../commands/rebuild-machines.sh $@
         ;;
     upgrade)
         ../commands/upgrade-machines.sh $@
         ;;
     update)
         ../commands/update.sh $@
         ;;
     update-lb)
         ../commands/update-lb.sh $@
         ;;
     tail)
         ../commands/remote-tail.sh $@
         ;;
     scale)
         ../commands/scale.sh $@
         ;;
     list)
         ../commands/list.sh $@
         ;;
     watch)
         ../commands/watch.sh $@
         ;;
     remote)
         ../commands/remote.sh $@
         ;;
     wire)
         ../commands/wire.sh $@
         ;;
     *)
        usage;
        exit 1
         ;;
 esac


